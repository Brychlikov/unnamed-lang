data List a 
= Empty 
| Cons a (List a)

data Option a 
= None 
| Some a

let length xs = 
    let inner acc xs = match xs with 
    | Empty    -> acc
    | Cons h t -> inner (acc + 1) t
    end
    in 
    inner 0 xs


let append xs ys = match xs with 
| Empty    -> ys 
| Cons h t -> Cons h (append t ys)
end


let revappend xs ys = match xs with 
| Empty -> ys 
| Cons h t -> revappend t (Cons h ys)
end


let map f xs = match xs with 
| Empty    -> Empty 
| Cons h t -> Cons (f h) (map f t)
end


let foldr f i xs = match xs with 
| Empty    -> i 
| Cons h t -> f h (foldr f i t)
end

let foldr2 f i xs = if isEmpty xs then i else 
    let h = getCons0 xs in 
    let t = getCons1 xs in 
    f h (foldr2 f i t)

let reverse xs = 
    let inner acc ys = match ys with 
    | Empty -> acc 
    | Cons h t -> inner (Cons h acc) t 
    end 
    in 
    inner [] xs


let find f xs = match xs with 
| Empty    -> None 
| Cons h t -> if f h then Some h else find f t
end

let printList xs = 
    let inner xs = match xs with 
    | Empty    -> print "]"
    | Cons h t -> print h; print ", "; inner t
    end 
    in 
    print "["; inner xs



let showList xs = 
    let inner xs = match xs with 
    | Empty    -> "]"
    | Cons h t -> h ++ ", " ++ inner t
    end 
    in 
    "[" ++ inner xs

# you gotta leave some empty space here :)
